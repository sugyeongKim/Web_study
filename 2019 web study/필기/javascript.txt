<< JavaScript
1. 1995년 netscape회사의 브렌든 아이크
2. Moch  -->  Livescript  -->  javascript
3. 표준기관 : ECMAscript (에크마)
4. 웹의 동적인 작동 제어
1) html : 정적인 문서, 문서 구조
2) css : 디자인
3) javascript : 동적인 기능
4) java랑 javascript는 별개인 언어
(for, while, do-while, switch 문법은 동일)
  - .java  --컴파일-->  .class  --> run
  - .js  ------> run (interpreter)
5) html은 1번째 줄부터 차례대로 실행
6) js로 할 수 있는 것 : node.js, (react, Vue), jQueary(자바스크립트 라이브러리), JSON(js객체 표기법으로 통신할 때 사용)

* 핵심 
1. 객체
2. 함수
3. Prototype
4. Closure
5. 함수형 프로그래밍

---------------------------------------------------------------------------------------

<< 자바스크립트 삽입 위치
1. 확장자 : .js
1) <script> </script>에 작성
:body 내부에도 작성 가능
2) 자바스크립트 파일에 따로 만들어서 외부로 링크
- <script부분에 
3) url부분에 삽입
4) HTML 태그의 이벤트리스너 속성에 작성


1. <head><script></script></head>
2.<body>
3.***.js <script src = ***.js>
4.html 태그에 삽입 <a href = "jsavascript:alert('hello')">


[이벤트]  ------이벤트를 해결하는 것------>  [이벤트 핸들러]
* 이벤트와 이벤트 핸들러가 잘 연결되게 하는 것 => addxxxListener
* xxx = click, keypress... 등
* 마우스 올라갔을때 : onmouseover
* 마우스 내려갔을때 : onmouseout



>>자바스크립트 사용해서 HTML 코드를 문서에 삽입하는 방법
- 브라우저에 직접 삽입.
  document.write()
  document.writeln() : 한 칸 띄는 것
** 줄 바꿈 : <br/>

>>html태그를 자바스크립트에서 가지고오는 방법
document.getElementById(A); id가 A인 애를 가져오는거
document.getElementById().value(); //id가 A인 애가 가지고있는 값

-사용자에게 메세지를 입력하거나 출력하는 3가지
1) prompt(메세지, 기본값);
2) confirm(메세지); 확인하는 창
확인누르면 ture, 취소 누르면 false 리턴
3) alert(문자열);


자바스크립트 문법 규칙
1. 자바스크립트는 대소무자 구분한다.
2. 첫글자는 알파벳, _, $ 로 시작한다.
3. 줄 마침 ; (한줄이면 안 찍어도 나오긴함
4.주석 : // , /* */

자바스크립트 데이터 종류1
1. 숫자: 정수, 실수
2. 논리: boolean (true, false)
3. 문자열 : " " , ' '
4. 객체 : 배열(array), 함수
5. null : 쓰레기값

변수선언하는 방법
1. 앞에 데이터 타입이 없다. (int a X)
2. var로 선언해줘야함.
  var a; a=30;
  var a = 30;
3. 기존의 변수를 다시 선언하는 것은 안됨.

<< 전역변수(global)와 지역변수(local)
전역변수(global) 
범위: 전체
함수밖에서 선언
var a; //전역변수
function(){
document.write();
x = 3 //* 전역변수

지역변수(local)
범위 : 선언된 함수 안에서
함수내에서 var로 선언해줘야함
var a;
function(){
var a; //지역변수는 함수내에서 var 붙여야댐. var안 붙이면 전역변수
a = 3; //지역변수
alert(a); // 
this.a // 전역변수 a를 가리킴
}


var x; //전역
function(){
var y; //지역
x=10; //전역
y=10; //지역
z=10; //전역
var x=1; //지역
this.x = 100; //전역
}

* 상수: 정해진 값 ex) PI=3.143592
*문자열상수: " ", ' '
*문자열 내에 문자열 포함할때


dom객체가 만들어진다 - 태그를 트리구조(계층구조)로 만들어주는거
(Document object model)
html
head
title
body
객체(objectt)->속성: 값;



<<연산자
1.산술연산자: + - * / % ++ --
* 32/10 => 자바: 3
          => 자바스크립트: 3.2
*js에서의 나눗셈은 항상 실수
2.대입연산자: =, +=
3.비교연산자: > < >= <=
4.논리연산자: &&, ||, !
5.비트연산자: &, |, ~, ^
6.조건연산자:
	형식: 조건 ? T일때 실행문; F일때 실행문
var a=5, b=3;
var big=(a>b)? a : b;

7.비트연산자
<< : 왼쪽으로 *2
>> : 오른쪽으로 /2 최상위비트로 채워짐
>>> : 오른쪽으로 맨 앞자리가 0으로 채워짐

<<제어문
1.조건문 : if, else, else if, switch
2.반복문 : for, while, do-while



<<배열  (자바스크립트에서는 배열의 데이터타입이 같지 않아도 됨
1.초기화
var arr=['a','b','c'];
2.객체
var arr = new Array();
arr[0]='a';
.
배열길이
arr.length
*둘다 많이 쓰임.
.

##연관배열 (인덱스자리에 문자?)
: 키(key) 값(value)으로 구성됨
인덱스가 숫자가 아니라 key. (문자) 가 들어감
ex) color : red;
      키     값

여러개의 데이터를 혼합해서 사용.
ex) arr2[0]=new date();
    arr2[1]=2;
    arr2[2]="가나다"

<<함수 생성
function 함수이름 (매개변수){
	함수가 실해할 내용;
	return 
}

<<함수 호출
함수이름( );

<<js에서는 함수도 값이 될 수 있다.
var add = function(var x, var y){
	return x+y;
}
=>이름이 없는 함수 (익명함수)


객체(object)
 -프로퍼티
 -메서드
*객체를 만들면 자동으로 프로퍼티, 메서드 만듦

1. Core객체. Array, String, Date, Math..
2. Dorm객체 Document, object
3. Bom 객체 Browser 등등
접근방법
객체이름.프로퍼티       객체이름[프로퍼티]
객체이름.메서드	      객체이름[메서드]


** 자바처럼 객체를 만들기 위한 클래스는 존재하지않는다.
** 자바스크립트는 객체지향이 아니다.

================================================
1.Array
1) var week = ["mon,"tue", "wed"];
2) var week = new Array("mon","tue","Wed");
*배열의 크기는 고정되지 않고 마지막 원소 추가시 늘어남
week[3]="thu";
week[5]="fri"; //오류발생.꼭 마지막에만 가능

3) var week=new Array(7);
week[o]="mon"

4) var week=new Array();



<<array의 메서드
1) concat(): 두 개의 문자열을 합침
	a.concat(B) = a와 b를 합침
2) reverse() : 역순
3) slice(a,b): a부터 b-1까지 자름
4) sort(): 정렬
5) Join(): 원소 사이를 , 로 연결
6) toString(): 원소들을 연결하여 하나의 문자열로 retrun 하는것
7) charAt(2): 인덱스 2(3번째 문자)에 있는 문자 출력
=====================================================
<<Date : 날짜 구하는 객체
1. 객체 만드는 방법
var date = new Date();
var date = new Date(y,m,d);
var date = new Date(y,m,d,h,m,s);

var now = date1.getDate(); 오늘 날짜
var time = date1.gethours(); 오늘 시간

2. Date의 메서드
1) getFullYear(): 네자리 년도를 가지고 옴 2019
2) getMonth(): 월을 가지고 옴 (1월 = 0 ... 12월 = 11)
3) getDate(): 날짜 가져오기 (1~31)
4) getDay(): 요일 가져오기 (일=0 ~ 금=5, 토=6);
5) getHours(): 시간 가져오기 (0~23)
6) getMinutes(): 분 가져오기 (0~59)
7) getSeconds(): 초 가져오기 (0~59)
8) getMilliseconds(): 더 자세한 초 가져오기 ( 0~ 999)
9) toLocalString(): 현재 지역시간 가져오기


<< String 객체

1) var str = new String("abc")
2) var str1 = "abc";
*내용 수정 불가

*String 객체는 일단 생성되면 수정부가
*문자열 길이: length
*문자열을 배열처럼 사용할 수 있음
var str = new String("hello")
document.write(str[1]);

2. String의 메서드
1) charAt(index): index에 있는 문자열 가져오기 (js에는 문자라는 개념이 읎음)
2) concat(): 문자열 연결
3) indexOf("s"): s의 위치
4) slice(a,b): 부분 문자열 추출 a부터 b-1
5) substr(a,b): a부터 b갯수만큼 자르기
6) toUpperCase(): 대문자 변환
7) toLowerCase(): 소문자 변환
8) repㅣace(a,b): a를 b로 치환
9) trim(): 공백제거 


Java/javascript)
math 클래스는 모든 메서드가 클래스 메서드이기 때문에 객체를 생성하지 않아도 클래스이름.메서드이름() 으로 호출이 가능
위에 3개는 객체 만들어조야댐


4. Math 객체
1) new Math() 로 작성 안함
-abs(): 절대값
-random(): 난수발생
-sqrt(): 제곱근
-round(x): 반올림
-floor(x):  x보다 작은 수 중 가장 큰수

2) 난수발생
Math.random(): 0.1~1.0보다 작은 실수




191101
함수가 객체 안에 들어오면 메서드가 됨.
(객체는 프로퍼티, 메서드로 이루어져있기 떄문!)

5) 사용자 객체 << 많이 씀

1. 리터럴 객체 생성
var data= {  
	'name' : 'kim',
	   변수 : 값 (' ' , " " 해도되고 안해도 됨)
	score : 85
	add : function(){
		return a+b;
		}
//data라는 객체는 name, score의 프로퍼티와 add라는 메서드를 가지고있는 객체가 됨.
	}


2. object
var data = new Object();
 data.name='Lee';
 data.scroe=80;
 data.add = function ( ) {    }

3. var data = { } ; // new Obeject == { } 
data.name;


4. prototype으로 생성(생성자)
var a = add(); //그냥 함수 호출
var a = new add(); //생성자 함수를 호출. => 객체를 생성했다는 뜻=> 생성한 객체를 a에 넣었따. a도 객체.

5. 객체는 객체를 담을수도 있고 함수 포함 가능 (객체 == 값, 함수 == 값 -> 변수에 들어갈수있다는 뜻)
var obj = {
	'kim' : 80,
	'list' : {'a':10, 'b':20, 'c':30};
	'show' : function(){alert('func');}
}

obj ['kim']

(1) 생성자는 함수로 만들어진다.
//함수도 값이기 때문에 변수에 들어갈 수 있다.
function sum(){} ;

function data(name, score){
	this.name=name;
	this.scroe=score;
	this.sum = sum;
	}

var patk = new data('park', 10);
//생성자 함수
//park 이라는 객체에 name='park', score=10이 들어간다.

 function Student(name, score){
                this.name=name;
                this.score=score;
                this.getGrade= function() {
                    if(this.score >= 80)
                        return "A";
                    else return "F";
                }
            }
            var kim=new Student('kim',70);
            var lee=new Student('lee',89);
            document.write(kim.name+"= "+kim.getGrade()+"<br>");
            document.write(lee.name+"= "+lee.getGrade());

객체는 인덱스가 string.
배열은 인덱스가 int

접근방법
data.name
data[ 'name' ]


var score={'kim' : 80, 'Lee' : 70, 'Park' : 60};
for(var 변수명 in 객체){
	alert();

for ( var key in score){
	alert(score[key]);
}


======================================================
<<자바스크립트 객체
1. 코어객체 : array, string, math, date 등등
2. DOM객체 : HTML태그를 객체로 만듬
<p> ----</p> : p객체로 변환 // 메서드 사용하려고 객체로 변환 
3. BOM객체: 브라우저 오브젝트 모델
	브라우저에 대한 정보, 모양을 제어(
	window, history, screen)
history.go(-1) 하나 뒤로 가라

-웹 브라우저 실행 후에는
1) DOM 객체가 만들어진다
2) DOM Tree가 만들어진다.
3) DOM 객체를 화면에 뿌려준다 -> 우리가 눈으로 확인가능


>>DOM객체
-HTML태그: element
-element는 다음과 같이 구성이 된다,
1)이름, 속성, CSS, 이벤트리스너, 컨텐츠(innerHTML)

<p id="first" style="color:blue" onclick="this.style.color='red'">
돔 예제입니다.
</p>
태그이름: p 
속성:  id="first"
CSS: style="color: blue"
이벤트 리스너:  onclick (==
컨텐츠: 시작태그와 종료태그 사이에 있는 내용
	돔 예제입니다. 
p.innerHTML: "ddddddd";

<< DOM객체 관계
- parentElement
- children
- firstElementChild
- lastElementChild
- previousElementSbling(왼쪽)
- nextElementSibling (오른쪽)
----------------------------------------------------------------------

<span id="myspan" style="color:red">test</span>
--태그
document.getElementsBytagName();
document.getElementsByclassName();

1. id로 span 태그 찾아서 span에 대입
2. 글자색을 녹색, 크기는 30px로 스타일 적용
3. 3픽셀 점선 파란색의 테두리
4. css속성 읽어오기 var color=span.style.color

innerHTML: 컨텐츠 내용
this: 현재 객체
<div onclick="this.style.color='red'">
<button onclick="this.style.fontsize="30pt">
-----------------------------------------------------
document는 DOM객체가 아니다
1)브라우저는 html문서 전에 document객체를 만든다.
2)document객체를 루트로 하여 DOM트리를 구서한다.

window.document.write(_)

document객체의 메서드
location: 파일 위치
domain: 주소
lastModified: 마지막 수정 날짜
readyState: loading
activeElement: focus가 있는 부분


<<dom 객체 찾기
1. document.getElementByTagName():
	태그이름으로 찾아서 컬렉션(배열) 리턴
2. var divTags = document.getElementsByTagName("div");
  *div태그의 갯수 : var cnt = divTags.length
3. document.getElementsByClassName();
	
 ---------------------------------------
document.write();
document.writeln(); //공백


<<div 객체의 동적 추가
 <div id="mydiv" style="color:red">
        새로 생성된 div 태그입니다
        </div>

1. 자바스크립트에서 동적으로 추가하는 코드
   var newDiv = document.createElemnet("div") ; div라는 이름의 dom객체 생성
   newDiv.innerHTML="새로 생성된 div태그입니다.
   newDiv.setAttribute("id","myDiv");
   newDiv.style.color="red";
   parent.append(newDiv);
                newDiv.onclick=function(){
                    var parent = this.parentElement;
                    parent.removeChild(this);
                }

2. Dom트리에 삽입
   1) 부모.appendChild(dom객체) : 부모의 마지막 자식에 추가
   2) 부모.insertBefore(dom객체, 기준) : 기준 앞에 추가
ex.p.appendChild(newDiv) : p

3. Dom트리에 제거
   : 부모.removeChild(제거하고자 하는 객체);

*Dom객체가 삽입, 제거될 때마다 브라우저는 자동 갱신


속성을 가지고 오는 거시 window.getComputedStyle(span[i]);
속성의 값을 가지고오는 것: 속성.getPropertyValue("visibility");


---------------------------------------------------------------------
이벤트(event): 사건이 일어남
click, mouseove, mousedown, mouseup, mouseleave 등등	
자바스크립트에서는 이벤트앞에 on붙여서 사용 eX) onclick 등등

이벤트리스너(enevtlistener): 일어난 이벤트를 처리(이벤트핸들러)
addEventListener(): 이벤트와 이벤트리스너를 연결시켜줌

1. html태그 안에서 작성
	<p onmouse="this.style.border ...>
2. AddEventListener() 사용
	p.addEventListener(이벤트, 리스너함수);
3. 익명함수 사용
	p.onmouseover=function(){ }

<<이벤트 객체
 : 이벤트를 발생시키는 애의 정보
mouse : 위치, 왼쪽버튼, 오른쪽버튼, 더블클릭....
-브라우저가 이벤트객체를 발생시킴
1) type : 발생한 이벤트 종류
2) target: 이벤트를 발생시킨 객체
---------------------------------------------------------------------------
<<마우스 이벤트
1) 리스너  onmousedown /onmouseup, onmouseover/onmouseout,
 onmouseenter / onmouseleave
-onwheel: 휠이 구르는 동안 호출 
 =>wheelDelta: 양수면 위로 스크롤
	        음수면 아래로 스크롤

2) 프로퍼티
-clientX, clientY : 마우스의 좌표 == (x,y)
-screenX, screenY: 스크린을 기준으로 한 마우스 좌표
-offsetX, offsetY: 객체를 기준으로 한 마우스 좌표
-wheelDelta: